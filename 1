See reporting dlh  pkg api controller accrued burst.go  she told then, Here is the validation you might have seen, and then we are going to the service. And then, click on the project, footer client, get subscription. This is basically to get the subscriptions, you might have understood by the name. Basically, numbers to the subscription objects. See what it does, This is basically to get the subscriptions. You might have understood by the name. Basically, numbers to the subscription objects. So you see what it does. It basically gives the array of the subscription-based objects. So, and then... Subscription to Historical Accrued Burst Detail Map. We are creating... So we are making calls... We are creating an array with the subscription to... Sorry, map with the subscription to Accrued Burst Detail. Now, where are we going to... Okay, this is one. Generate Historical Accrued Burst Detail. This is where we will be getting the accrued burst from the footer client. And then you notice how the structure of the accrued burst. And then, this is where... See. If helper string time service start late... See, this one, I'll tell you what is happening here..


Please listen carefully. For July 12, there is an invoice 001 created, and the billing start period for this is June 1st to June, July, August, September, let's say, June 1st to August, but you have asked us for the July 12th, didn't you? You asked us for July 12th, which is falling inside the period. Please preserve it that... Okay, sorry. Oh, okay, I understand. That is what happens with this, Savita. I think I'm going to confuse you more.

The date that you got the cancer, that is the first day you got. And then that involves the afterbirth, July 1st, which is falling inside the pre-egg. Leaves the cervix dark. Okay, sorry. Oh, okay, I get it. That is what happens in this charita. I think I'm going to confuse you more. Okay. So that one is the date that you got the cancer, that is the first day you got. And then that involves 0, 0 to 1 created, which was from August 1st to August, September, October. Okay, August, September, October, let's say, these three months. So in this case, cervix... What am I talking? Shit. My first scenario was right. Sorry. See, you are asking for the July 12th, so this date should be falling under any of the invoices, billing period, that's when it comes, right? Ah, yeah. Okay, so July 12th is the date that you are looking for, and the invoice was 0, 0, 1, which has dates from June to August, which has July 12th falling in the period. Okay, but even though June, August was there, you have afterbirth only from the July 12th. Okay. Okay, but to calculate the consumption, to calculate a few other things, you need afterbirth from June 1st to July 12th. You understand? Ah, okay. So for that, I'll be making another call. Okay. Here, afterbirth, the object, the first object you got, cervix.date in that, which is June 1st, to the from date, which is July 12th. So I'll be sending these custom dates and getting the afterbirth. So this, with this, how am I going to get it? If the invoice is generated, if any invoice is added to the list of objects that are going as afterbirth output, you will have afterbirth data from the starting of the cervix.date, not the date the customer has given. You'll have data from the cervix.date. Okay. If there is any invoice date that's touching, in the time range, if your date is falling inside any invoice, date range, invoice billing start and period, you would want to have the accrued births of every date associated in the every invoice, right? Hmm. Okay? So that is what we are doing here. If you go through it again, I think it's going to make sense.


We have discussed about it. But if you are still confused, you can tell me. So the date is missed. We are calculating the accrued burst again. And then with that, we are making a map with the service level to invoice accrued burst. This is where it is a bit confusing, so that's why I wanted to tell you. And now, what you have by the end of this method is service level to historical accrued burst mapping. So you see, when you make a call to the footer client, you will be sending service level. So accrued burst is calculated unique to the service level. Now coming back.


There will be some dates when KUTA client will be sending service level. Accrued burst is calculated unique to the service level. Now coming back. So when you say instant accrued burst, there will be some dates where burst did not happen. They were within the limits of committed data. But when you are getting the data from database, you wouldn't have the data. You won't find a row saying that today it's zero. You see the structure of the database also when you are following this. So you'll see what I mean. So when you go into this, when you go, you followed KUTA? Yeah. This is basically client, there is nothing going to happen. But we need to go this way. Accrued burst and then how it is getting here. But the change is not here. So whatever data we are getting, that is good for you. So that's why I'm not getting into the technicalities of the KUTA code. But I very much want you to go through and understand how we are getting the data from the database. Okay, so in KUTA we have one great accrued burst and then here also you have service, right? Savita, let me record it. Okay.

______zoom call___

So I started recording. Now just to recap, this link is going to be only with you, only for you, ok? So just to recap what we have discussed, in here, reporting DNS controller, in service level, uproot burst by the subscription number, that means there would be multiple subscription numbers that will try to get the uproot burst, then go into uproot burst service, in here, we are making calls to the footer. So how it is calculated is, let's say the date range given is July 12th to some random day 2, some random day, and all the invoices, service end dates falling into that range will be taken. So in that case, there could be one invoice which could be service start date and the date could be June 1st to August 1st. As long as August 1st is falling in the date range you have given, the invoice is going to come. But what you are missing with that is, you wouldn't have the data, uproot burst data from June 1st to July 12th, because your front date is July 12th. Right? To fill, you can make a call to the footer client, starting with service start date, and then to the front date, basically June 1st to July 12th. Okay? So, and this is saved into a map with the service level as key. So service level T, invoice uproot burst we have here, and then... going back to the invoker of this method, this is where we are getting the uproot burst from footer. And then this is where we are basically transforming the data. Okay? In here what we are doing is, service level uproot burst. You see, did you follow through this one, Sartha? Like how comfortable are you with this? This one is like... I have gone through this code.

Yeah, what I understood is like, if you take the raw data and it converts into format, that's how it is, or? It is, yes, it does that, but what I want you to focus is here, focus here is, this invoice accrued burst is there, right, you see. First, accrued birth, when you see this, invoice, the one coming from here, this is the, this is where, so invoice accrued historical birth is this one. This one, this is what we are getting from the footer. This is being attached to subscription number, so it's basically the map has become subscription number, service level, and the historical, accrued birth. Okay, so, now, if you see this, so this is map, this is the subscription number, and the capacity is in here. Okay, when you get inside, this is again service level detail, but we are fixing the data for this. So historical accrued burst detail is the one where we have the historical accrued birth from footer. Then, in here, in this object, we have the subscription based information, and then the invoice historical accrued burst. We can take inside this one, like this. You see, invoice historical accrued burst. , and then you have subscription based information. This whole capacity usage detail is going to be mapped to subscription number. Okay, and then, this service level accrued birth detail, what it is doing is, it is taking all the accrued births. What is accrued birth here, that is invoiced accrued birth you got here, right? You are taking it and creating a thing. Epoch accrued burst is, one second, I think this happened here. It is basicallyâ€¦

Map to timestamp so every accrued birth object you are giving there will be a timestamp associated with it with that timestamp I am trying to I am trying to sort it ok so and then I take the other timestamp with the other timestamp, total accrued birth so starting from the service target I think I am adding up all the daily values ok so what exactly is happening is like there will be a timestamp like this time so much data has been used so that will be like adding the values yes so with that you will be getting the total accrued birth for the billing period ok so now you will send it as an object where accrued birth point is the total accrued birth that you have calculated total and then the timestamp is going to be service end date ok and billing period is the annual or the monthly or the service end date see, timestamp is always going to be


Invoice Accrued Burst is something, you are totaling the accrued burst over the period of invoice. So what I mean by that is, when invoice 001 you got, it was June 1st to August 1st, you remember? June 1st, 2 or 3 months. So when you get the accrued burst of food, then what you get is 90 samples of accrued burst. Once for every day. That is what you are trying to add it up here, starting from June 1st. It won't be always be June 1st. Billing period could be somewhere in between also. Invoice 2 could be from, for other customer, invoice 5232. 5232 could be from, what do you say, April 15th to April May 15th. This is month 3 and then starting in between the months. So you would have known. Right? So it is not always start of the month. It could be a random day in a month. Where the service billing period is starting. So we are calculating the sum of the accrued burst throughout the billing period of that invoice. You get my point? So that particular month, say from 12th to next 12th, we will calculate that invoice and we will add it to the accrued burst. Right? Yes. Yes. So that will go there and then service end date is going to be time stamp. It is basically saying that a time stamp has to be associated with the invoice. Right? We selected that as the service end date which is May 15th. Like that. Okay? And then the subscription number and these are all straightforward. This is what I wanted to show you. Okay? And then this is again, some formatting is happening and then it is being sent back. So here what you have to do is, you have to make a call to the consumption reg. But I could be wrong here because I did not, I, this is, I am thinking this is.

If you see any blocker, if you think that Anusha, this cannot happen, this is what the problem is, then come back to me, we'll come up with some other solution, okay? So, here, when the invoice dates are there, right? Sir, we send it and start it. You are supposed to make a call to the consumption tabaccy usage... ...capacity usage call to the food tab. Send capacity usage call to the food tab, and see what is the format of the capacity usage coming from the food tab. So, just like how you did the post-processing in our group, you also have to do the post-processing. In capacity usage also, they might be doing some post-processing and making it ready for the... Can you just show me that one? Yes.




